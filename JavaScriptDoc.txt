Spread Parameters
For function calls:
1)myFunction(...iterableObj); // pass all elements of iterableObj as arguments to function myFunction

For array literals or strings:
2)[...iterableObj, '4', 'five', 6]; // combine two arrays by inserting all elements from iterableObj

For object literals (new in ECMAScript 2018):
3)let objClone = { ...obj }; // pass all key:value pairs from an object 


Rest Parameters
=> Rest syntax looks like spread operartors but it is opposite of that
=> Spread parameters expands an array into its elements.
=> While rest parameters collects multiple elements and condenses them into a single element.


Copy an array
arr1 = [1,2,3];
arr2 = [...arr1];

arr2.push(4)//1,2,3,4


Angular life cycle hooks
1)A component instance has a lifecycle that starts when Angular instantiates the component class and renders the component view along with its child views. The lifecycle continues with change detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. The lifecycle ends when Angular destroys the component instance and removes its rendered template from the DOM. Directives have a similar lifecycle, as Angular creates, updates, and destroys instances in the course of execution.

2)You can respond to events in the lifecycle of a component or directive by implementing one or more of the lifecycle hook interfaces in the Angular core library. The hooks give you the opportunity to act on a component or directive instance at the appropriate moment, as Angular creates, updates, or destroys that instance.

3)Each interface defines the prototype for a single hook method, whose name is the interface name prefixed with ng.For example, the OnInit interface has a hook method named ngOnInit(). If you implement this method in your component or directive class, Angular calls it shortly after checking the input properties for that component or directive for the first time.

4)Angular Component Lifecycle Hooks
Step 1:Import the Life Cycle Hooks interface
import {OnInit} from '@angular/core';

Step 2:Make the component class implement the Life Cycle Hook interface
export class SimpleComponent implements OnInit

Step 3:Write the implementation code for the life cycle interface method
ngOnInit(){
console.log('OnInit Life Cycle Hook');
}

5) => ngOnChanges - Executes, every time the value of an input property changes.The hook method receives a SimpleChanges object containing current and previous value.This is called before ngOninit.

=> ngOnInit = Executes after the constructor and after ngOnChange hook for the firts time.It is most commonly used for component initialisation and retrieving data from database.

=> ngOnDestroy = Executes just before angular destroys the component and generally used for performing cleanup.

6)When monitoring the same property Angular recommends not to use ngOnChanges and ngDoCheck.Because if the the input property changes both the hooks could fire and execute heavy logic.

7)ngDoCheck is called after ngOnChanges on every change detection run and immediately after ngOnInit on the first run.Avoid heavy logic here.
8)ngAfterContentInit - Invoked after Angular performs any content projection into the component's view.(Content projection is a way to import HTML content from outside the component and insert that content
into the component's template in a designated spot).This is mainly used if you are implementing the <ng-content> HTML tags and @ContentChild component properties.This is called once after the first ngDoCheck.

9)ngAfterContentInitChecked - Runs after Angular checks the content projected into the current component.This is called after ngAfterContentInit and every subsequent ngDoCheck.Avoid putting heavy logic here.

10)ngAfterViewInit - Runs after Angular initialises the component's views and child's views.This is the first time you will have access to the @ViewChild properties on your component.It is called once after 
the first ngAfterContentChecked.

11)ngAfterViewChecked - Runs after Angular checks the component's views and child views.This is called after ngAfterViewInit and every subsequent ngAfterContentChecked.

12)ngOnDestroy - The cleanup hook that runs just before the component is destroyed.This is a great place to unsubscribe from  all your observables and detach any event handles you have to avoid memory leaks.
13)We cannot have more than one structural directive on a single element.
--------------------------------------------JAVASCRIPT----------------------------
1)Type(x) Values Result
Number x has the same value as y (but not NaN) true
String x and y are identical characters true
Boolean x and y are both true or both false true
Object x and y reference the same object true

If x and y are different types, then the result is false.
Let's see some examples:
console.log('packt' === true); //false
console.log('packt' === 'packt'); //true
var person1 = {name:'John'};
var person2 = {name:'John'};
console.log(person1 === person2); //false, different objects

2)A class can also contain functions. We can declare and use a function as the following
code demonstrates:
Book.prototype.printTitle = function(){
 console.log(this.title);
};
book.printTitle();
We can declare functions directly inside the class definition as well:
function Book(title, pages, isbn){
 this.title = title;
 this.pages = pages;
 this.isbn = isbn;
 this.printIsbn = function(){
 console.log(this.isbn);
 }
}
book.printIsbn();
In the prototype example, the printTitle function is going to be
shared between all instances, and only one copy is going to be created.
When we use class-based definition, as in the previous example, each
instance will have its own copy of the functions. Using the prototype
method saves memory and processing cost in regards to assigning
the functions to the instance. However, you can only declare public
functions and properties using the prototype method. With a classbased definition, you can declare private functions and properties
and the other methods inside the class can also access them. You will
notice in the examples of this book that we use a class-based definition
(because we want to keep some properties and functions private). But,
whenever possible, we should use the prototype method.

3)=> The JavaScript array class also has a method called unshift, which inserts the
values passed in the method's arguments at the start of the array:
numbers.unshift(-2);
numbers.unshift(-4, -3);
=>To actually remove an element from the beginning of the array, we can use the shift
method as follows:
numbers.shift();
 
4)We can use the splice method to remove an element from an array by simply
specifying the position/index we would like to delete from and how many
elements we would like to remove:
numbers.splice(5,3);
This code will remove three elements starting from index 5 of our array. This means
numbers[5], numbers[6], and numbers[7] will be removed from the numbers array.
The content of our array will be -3, -2, -1, 0, 1, 5, 6, 7, 8, 9, 10, 11, and 12 (as numbers
2, 3, and 4 have been removed).

Now, let's say we want to insert numbers 2 to 4 back into the array starting from
position 5. We can again use the splice method to do this:
numbers.splice(5,0,2,3,4);
Chapter 2
[ 37 ]
The first argument of the method is the index we want to remove or insert elements
from. The second argument is the number of elements we want to remove (in this
case, we do not want to remove any, so we pass the value 0 (zero)). And the third
argument (and onwards) are the values we would like to insert into the array
(elements 2, 3, and 4). The output will be the values from -3 to 12 again.

5)Method Description
concat Joins multiple arrays and returns a copy of the joined arrays
every Calls a function for every element of the array until false is
returned
filter Creates an array with each element that evaluates to true in the
function provided
forEach Executes a specific function on each element of the array
join Joins all the array elements into a string
indexOf Searches the array for specific elements and returns its position
lastIndexOf Returns the last item in the array that matches the search criteria
and returns its position
map Creates a new array with the result of calling the specified function
on each element of the array
reverse Reverses the array so the last items become the first and vice versa
slice Returns a new array from the specified index
some Passes each element through the supplied function until true is
returned
sort Sorts the array alphabetically or by the supplied function
toString Returns the array as a string
valueOf Like the method toString, this returns the array as a string

6)Joining multiple arrays
Consider a scenario where you have different arrays and you need to join all of them
into a single array. We could iterate each array and add each element to the final
array. Fortunately, JavaScript already has a method that can do that for us, named
the concat method:
var zero = 0;
var positiveNumbers = [1,2,3];
var negativeNumbers = [-3,-2,-1];
var numbers = negativeNumbers.concat(zero, positiveNumbers);
We can pass as many arrays and objects/elements to this array as we desire. The
arrays will be concatenated to the specified array in the order the arguments
are passed to the method. In this example, zero will be concatenated to
negativeNumbers, and then positiveNumbers will be concatenated to the resulting
array. The output of the numbers array will be the values -3, -2, -1, 0, 1, 2, and 3.

7)For accented characters, we can use the localeCompare method as well:
var names2 = ['Maève', 'Maeve'];
console.log(names2.sort(function(a, b){
 return a.localeCompare(b);
}));
And the output will be ["Maeve", "Maève"].

